package com.hrms.util;

import java.security.Key;
import java.util.Date;
import java.util.function.Function;

import org.springframework.stereotype.Component;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtil {

    // üîê Use a secret key with at least 256 bits (32+ chars for HS256)
    private static final String SECRET = "mYsUP3rS3cReTK3yForJWTsGENerAtIon1234";

    private final Key SECRET_KEY = Keys.hmacShaKeyFor(SECRET.getBytes());

    // ‚úÖ Generate token with role claim
    public String generateToken(String username, String role) {
        return Jwts.builder()
                .claim("role", role) // üëà Add custom claim (e.g., ROLE_HR, ROLE_ADMIN)
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) // 1 hour validity
                .signWith(SECRET_KEY, SignatureAlgorithm.HS256)
                .compact();
    }

    // ‚úÖ Extract username (subject) from token
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    // ‚úÖ Generic claim extractor
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    // ‚úÖ Extract all claims
    public Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(SECRET_KEY)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // ‚úÖ Validate token with username
    public boolean validateToken(String token, String username) {
        final String extractedUsername = extractUsername(token);
        return (extractedUsername.equals(username) && !isTokenExpired(token));
    }

    // ‚úÖ Check if token is expired
    private boolean isTokenExpired(String token) {
        return extractAllClaims(token).getExpiration().before(new Date());
    }
}
